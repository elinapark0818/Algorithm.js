// 정규식이란? 정규식은 문자열에 나타는 특정 문자 조합과 대응시키기 위해 사용되는 패턴이다.
// 정규식을 만드는 방법은 2가지이다.
// 첫 번째 : '/'로 감싸서 사용한다.
const str = /ab+c/;
// 두 번째 : RegExp()로 호출한다
const str = new RegExp("ab+c");

// 정규식 패턴 작성하기
// 정규식 패턴은 단순 문자와 특수 문자의 조합으로 구성될 수 있다.

// \ : 백슬래시(\) 다음에 오는 문자는 특별하지 않고 문자를 있는 그대로 해석한다
// /문자*/ : 0개 이상의 '문자' 에 대응된다
// /문자\*/ : '문자*' 에 대응된다

// ^ : 입력의 시작 부분에 대응한다
// 예를들어 /^A/는 'Aa'에 있는 A와는 대응되지만, 'aA'에 있는 A와는 대응되지 않는다

// $ : 입력의 끝 부분에 대응한다
// 예를들어 /t$/는 'Tt'에 있는 t와는 대응되지만, 'tT'에 있는 T와는 대응되지 않는다

// * : 0회 이상 연속으로 반복되는 부분에 대응된다. {0,}와 같은 의미다
// 예를 들어 /ab*/ 는 'abbb'와 대응된다. 'aaccc' 에서는 'a'에 대응된다

// + : 1회 이상 연속으로 반복되는 부분에 대응된다
// 예를 들어 /a+/는 'a'에 대응되고, 'aaab' 에서는 'aaa'에만 대응된다

// ? : 0 또는 1회 등장하는 부분과 대응된다. {0, 1}과 같은 의미
// 예를들어 /e?le?/ 는 'angel'에서 'el'과 대응된다
// 예를들어 /e?le?/ 는 'angle'에서 'le'과 대응된다
// 예를들어 /e?/ 는 'lee'에서 'e'와 대응된다

// . : 개행 문자(줄바꿈)을 제외한 모든 단일 문자와 대응된다
// 예를들어 /.n/ 는 ' n, an, on, n '에서 'an'과 'on'에 대응되지만, ' n', ' n '에는 되응되지 않는다

// | : 또는

// [:alnum:] : 영문자와 숫자를 뜻한다. [A-Za-z0-9]

// \w : 영문자와 숫자 그리고 밑줄 문자를 뜻한다. [A-Za-z0-9_]

// \W : 영문자와 숫자 그리고 밑줄 문자를 제외한 문자를 뜻한다. [^A-Za-z0-9_]

// [:alpha:] : 영문자를 뜻한다. //* [A-Za-z]

// [:upper:] : 알파벳 대문자를 뜻한다. //* [A-Z]

// [:lower:] : 알파벳 소문자를 뜻한다. //* [a-z]

// \d : 숫자를 뜻한다. //* [0-9]

// \D : 숫자를 제외한 문자를 뜻한다. [^0-9]

// [:blank:] : 공백과 탭 문자를 뜻한다. [\t]

// \b : 단어 사이의 경계를 뜻한다. [(?<=\W)(?=\w)|(?<=\w)(?=\W)]
