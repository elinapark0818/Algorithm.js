// 실패율 구하기
// 스테이지에 도달했으나 아직 클리어하지 못한 플레이어의 수 / 스테이지에 도달한 플레이어 수
// 전체 스테이지의 개수 N
// 스테이지에 도달했으나 아직 클리어하지 못한 플레이어가 담긴 배열 stages
// 실패율이 높은 스테이지부터
// 내림차순으로
// 스테이지 번호가 담겨있는 배열을 리턴하라

// 실패율이 높은 스테이지를 순서대로 출력하는 문제이다.

// 총 유저의 수 - 스테이지 1에 머무른 유저 수 = 스테이지2에 도전한 유저 수
// 도달하지 못한 스테이지를 배열의 가장 마지막에 위치시키면 된다..
// N + 1 은 마지막 스테이지(N 번째 스테이지) 까지 클리어 한 사용자

// 입출력 예제
// [1: 1/8, 2: 3/7, 3: 2/4, 4: 1/2, 5: 0/1]
// => [2/4, 1/2, 3/7, 1/8, 0/1] ==> [3,4,2,1,5]

function solution(N, stages) {
  let answer = [];
  // 전체 플레이어가 몇 명인지 (실패한 사람을 제외시키기 위한 임의 변수)
  let player = stages.length;
  // 스테이지 수만큼(N) 반복문
  // 0을 예외처리 => 스테이지 '1'부터 시작
  // 스테이지 완료한 사람도 체크하기 위해 N+1 까지 반복
  for (let i = 1; i <= N + 1; i++) {
    // 실패한 사람이 총 몇 명인지 카운트
    let count = stages.filter((n) => n === i).length;
    // 스테이지 번호와 실패율을 answer에 할당
    answer.push([i, count / player]);
    // 실패한 사람들을 전체사람 수에서 뺀다
    player -= count;
  }
  // N+1 인 사람은 스테이지를 통과한 사람이니까 pop으로 뺀다
  answer.pop();
  // 내림차순 정렬
  answer = answer.sort((a, b) => b[1] - a[1]);
  // 스테이지 번호만 리턴
  return answer.map((a) => a[0]);
}

// filter 랑 sort 공부해야겠다.
